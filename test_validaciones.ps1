# Script para probar validaciones de duplicados CI/NIT
# Ejecutar desde el directorio ra√≠z del proyecto Django

param(
    [switch]$CrearDatos,
    [switch]$ProbarValidaciones,
    [switch]$MostrarEstadisticas,
    [switch]$LimpiarDatos,
    [switch]$TodoCompleto,
    [switch]$Ayuda
)

# Funci√≥n para mostrar ayuda
function Show-Help {
    Write-Host "=== SCRIPT DE PRUEBAS DE VALIDACI√ìN DE DUPLICADOS ===" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "USO:" -ForegroundColor Yellow
    Write-Host "  .\test_validaciones.ps1 [OPCIONES]"
    Write-Host ""
    Write-Host "OPCIONES:" -ForegroundColor Yellow
    Write-Host "  -CrearDatos          Crear datos de prueba"
    Write-Host "  -ProbarValidaciones  Ejecutar pruebas de validaci√≥n"
    Write-Host "  -MostrarEstadisticas Mostrar estad√≠sticas actuales"
    Write-Host "  -LimpiarDatos        Limpiar datos de prueba"
    Write-Host "  -TodoCompleto        Ejecutar secuencia completa"
    Write-Host "  -Ayuda               Mostrar esta ayuda"
    Write-Host ""
    Write-Host "EJEMPLOS:" -ForegroundColor Green
    Write-Host "  .\test_validaciones.ps1 -TodoCompleto"
    Write-Host "  .\test_validaciones.ps1 -CrearDatos -ProbarValidaciones"
    Write-Host "  .\test_validaciones.ps1 -MostrarEstadisticas"
    Write-Host ""
}

# Funci√≥n para ejecutar comando Django con manejo de errores
function Invoke-DjangoCommand {
    param(
        [string]$Command,
        [string]$Description
    )
    
    Write-Host "`n>>> $Description" -ForegroundColor Cyan
    Write-Host "Ejecutando: python manage.py $Command" -ForegroundColor Gray
    Write-Host ("="*60) -ForegroundColor DarkGray
    
    try {
        $result = python manage.py $Command
        if ($LASTEXITCODE -eq 0) {
            Write-Host $result
            Write-Host "`n‚úÖ $Description completado exitosamente" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Error ejecutando: $Command" -ForegroundColor Red
            Write-Host $result -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå Excepci√≥n ejecutando: $Command" -ForegroundColor Red
        Write-Host $_.Exception.Message -ForegroundColor Red
        return $false
    }
    
    return $true
}

# Funci√≥n para probar endpoints API
function Test-ApiEndpoints {
    Write-Host "`n>>> PROBANDO ENDPOINTS DE VALIDACI√ìN V√çA API" -ForegroundColor Cyan
    Write-Host ("="*60) -ForegroundColor DarkGray
    
    # Verificar si el servidor est√° corriendo
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8000/api/" -Method GET -TimeoutSec 5 -ErrorAction Stop
        Write-Host "‚úÖ Servidor Django est√° activo" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Servidor Django no est√° activo en http://localhost:8000" -ForegroundColor Red
        Write-Host "   Ejecuta: python manage.py runserver" -ForegroundColor Yellow
        return
    }
    
    # Test 1: Validar email nuevo
    Write-Host "`n1. Probando validaci√≥n de email nuevo..."
    try {
        $body = @{
            email = "test.api@example.com"
        } | ConvertTo-Json
        
        $headers = @{
            "Content-Type" = "application/json"
        }
        
        $response = Invoke-WebRequest -Uri "http://localhost:8000/api/usuarios/validacion/validar-duplicados/" -Method POST -Body $body -Headers $headers -TimeoutSec 10
        Write-Host "   ‚úÖ Email v√°lido - Status: $($response.StatusCode)" -ForegroundColor Green
        Write-Host "   Respuesta: $($response.Content)" -ForegroundColor Gray
    }
    catch {
        Write-Host "   ‚ùå Error validando email: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    # Test 2: Validar documento nuevo
    Write-Host "`n2. Probando validaci√≥n de documento nuevo..."
    try {
        $body = @{
            tipo_documento = "CI"
            numero_documento = "99887766"
            extension_documento = "5X"
        } | ConvertTo-Json
        
        $response = Invoke-WebRequest -Uri "http://localhost:8000/api/usuarios/validacion/validar-duplicados/" -Method POST -Body $body -Headers $headers -TimeoutSec 10
        Write-Host "   ‚úÖ Documento v√°lido - Status: $($response.StatusCode)" -ForegroundColor Green
        Write-Host "   Respuesta: $($response.Content)" -ForegroundColor Gray
    }
    catch {
        Write-Host "   ‚ùå Error validando documento: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    # Test 3: Obtener estad√≠sticas de documentos
    Write-Host "`n3. Obteniendo estad√≠sticas de documentos..."
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8000/api/usuarios/documentos/estadisticas/" -Method GET -TimeoutSec 10
        Write-Host "   ‚úÖ Estad√≠sticas obtenidas - Status: $($response.StatusCode)" -ForegroundColor Green
        Write-Host "   Respuesta: $($response.Content)" -ForegroundColor Gray
    }
    catch {
        Write-Host "   ‚ùå Error obteniendo estad√≠sticas: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    # Test 4: Listar documentos
    Write-Host "`n4. Listando documentos existentes..."
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8000/api/usuarios/documentos/" -Method GET -TimeoutSec 10
        Write-Host "   ‚úÖ Lista obtenida - Status: $($response.StatusCode)" -ForegroundColor Green
        $documentos = $response.Content | ConvertFrom-Json
        Write-Host "   Total documentos: $($documentos.count)" -ForegroundColor Gray
    }
    catch {
        Write-Host "   ‚ùå Error listando documentos: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Funci√≥n principal
function Main {
    Write-Host "=== PRUEBAS DE VALIDACI√ìN DE DUPLICADOS CI/NIT ===" -ForegroundColor Cyan
    Write-Host "Cooperativa SI2 - Sistema de Auditor√≠a" -ForegroundColor Gray
    Write-Host ("="*60) -ForegroundColor DarkGray
    
    # Verificar que estamos en el directorio correcto
    if (-not (Test-Path "manage.py")) {
        Write-Host "‚ùå Error: No se encontr√≥ manage.py" -ForegroundColor Red
        Write-Host "   Ejecuta este script desde el directorio ra√≠z del proyecto Django" -ForegroundColor Yellow
        exit 1
    }
    
    # Verificar que el comando existe
    $commandExists = python manage.py help | Select-String "test_validaciones"
    if (-not $commandExists) {
        Write-Host "‚ùå Error: Comando test_validaciones no encontrado" -ForegroundColor Red
        Write-Host "   Verifica que el archivo de comando est√© en la ruta correcta" -ForegroundColor Yellow
        exit 1
    }
    
    # Ejecutar seg√∫n par√°metros
    if ($Ayuda) {
        Show-Help
        return
    }
    
    if ($TodoCompleto) {
        Write-Host "üöÄ EJECUTANDO SECUENCIA COMPLETA DE PRUEBAS" -ForegroundColor Magenta
        
        # 1. Mostrar estad√≠sticas iniciales
        Invoke-DjangoCommand "test_validaciones --mostrar-estadisticas" "Estad√≠sticas iniciales"
        
        # 2. Crear datos de prueba
        if (Invoke-DjangoCommand "test_validaciones --crear-datos-prueba" "Creaci√≥n de datos de prueba") {
            
            # 3. Probar validaciones
            Invoke-DjangoCommand "test_validaciones --probar-validaciones" "Pruebas de validaci√≥n"
            
            # 4. Mostrar estad√≠sticas finales
            Invoke-DjangoCommand "test_validaciones --mostrar-estadisticas" "Estad√≠sticas finales"
            
            # 5. Probar API (opcional)
            $respuesta = Read-Host "`n¬øProbar endpoints de API? (y/N)"
            if ($respuesta -eq "y" -or $respuesta -eq "Y") {
                Test-ApiEndpoints
            }
            
            # 6. Limpiar datos
            $respuesta = Read-Host "`n¬øLimpiar datos de prueba? (y/N)"
            if ($respuesta -eq "y" -or $respuesta -eq "Y") {
                Invoke-DjangoCommand "test_validaciones --limpiar-datos" "Limpieza de datos de prueba"
            }
        }
        
        Write-Host "`nüéâ SECUENCIA COMPLETA FINALIZADA" -ForegroundColor Magenta
        return
    }
    
    # Ejecutar comandos individuales
    if ($CrearDatos) {
        Invoke-DjangoCommand "test_validaciones --crear-datos-prueba" "Creaci√≥n de datos de prueba"
    }
    
    if ($ProbarValidaciones) {
        Invoke-DjangoCommand "test_validaciones --probar-validaciones" "Pruebas de validaci√≥n"
    }
    
    if ($MostrarEstadisticas) {
        Invoke-DjangoCommand "test_validaciones --mostrar-estadisticas" "Estad√≠sticas de documentos"
    }
    
    if ($LimpiarDatos) {
        Invoke-DjangoCommand "test_validaciones --limpiar-datos" "Limpieza de datos de prueba"
    }
    
    # Si no se especific√≥ ning√∫n par√°metro, mostrar ayuda
    if (-not ($CrearDatos -or $ProbarValidaciones -or $MostrarEstadisticas -or $LimpiarDatos -or $TodoCompleto)) {
        Show-Help
    }
}

# Ejecutar funci√≥n principal
Main
